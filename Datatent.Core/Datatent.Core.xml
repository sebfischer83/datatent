<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Datatent.Core</name>
    </assembly>
    <members>
        <member name="T:Datatent.Core.Algo.Sort.Insertion">
            <summary>
            Simple insertion sort implementation
            </summary>
        </member>
        <member name="M:Datatent.Core.Algo.Sort.Insertion.Sort``1(``0[]@)">
            <summary>
            Sorts the specified array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
        </member>
        <member name="T:Datatent.Core.Algo.Sort.NumberSystem">
            <summary>
            The number system that is used
            </summary>
        </member>
        <member name="F:Datatent.Core.Algo.Sort.NumberSystem.Unsigned">
            <summary>
            uint/ulong
            </summary>
        </member>
        <member name="F:Datatent.Core.Algo.Sort.NumberSystem.OnesComplement">
            <summary>
            not common, but can be treated the same as twos-complement for the purposes of sorting
            </summary>
        </member>
        <member name="F:Datatent.Core.Algo.Sort.NumberSystem.TwosComplement">
            <summary>
            int/long
            </summary>
        </member>
        <member name="F:Datatent.Core.Algo.Sort.NumberSystem.SignBit">
            <summary>
            float/double
            </summary>
        </member>
        <member name="T:Datatent.Core.Algo.Sort.NumberSystem`1">
            <summary>
            Number system
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Datatent.Core.Algo.Sort.NumberSystem`1.Length">
            <summary>
            Gets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="M:Datatent.Core.Algo.Sort.NumberSystem`1.#cctor">
            <summary>
            Initializes the <see cref="T:Datatent.Core.Algo.Sort.NumberSystem`1"/> class.
            </summary>
        </member>
        <member name="M:Datatent.Core.Algo.Sort.NumberSystem`1.Set(Datatent.Core.Algo.Sort.NumberSystem)">
            <summary>
            Sets the specified number system.
            </summary>
            <param name="numberSystem">The number system.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">numberSystem</exception>
            <exception cref="T:System.InvalidOperationException">The number-system for '{typeof(T).Name}' has already been set and cannot be changed</exception>
        </member>
        <member name="T:Datatent.Core.Algo.Sort.RadixLds">
             <summary>
             least significant digit (LSD) radix sort implementation
             </summary>
             <remarks>
             https://en.wikibooks.org/wiki/Algorithm_Implementation/Sorting/Radix_sort
            
             <list type="table">
             <item>
             <term>Best-Case</term>
             <term>O(w+n)</term>
             </item>
             <item>
             <term>Worst-Case</term>
             <term>O(w*n)</term>
             </item>
             <item>
             <term>Space Complexity</term>
             <term>O(w+n)</term>
             </item>
             </list>
             </remarks>
        </member>
        <member name="M:Datatent.Core.Algo.Sort.RadixLds.Sort(System.Span{System.UInt32},System.Boolean,System.Int32)">
            <summary>
            Sorts the specified array.
            </summary>
            <param name="a">a.</param>
            <param name="usePool">if set to <c>true</c> [use pool].</param>
            <param name="groupingBits">The grouping bits.</param>
        </member>
        <member name="M:Datatent.Core.Algo.Sort.RadixLds.Sort(System.UInt32[],System.Boolean,System.Int32)">
            <summary>
            Sorts the specified array.
            </summary>
            <param name="a">a.</param>
            <param name="usePool">if set to <c>true</c> [use pool].</param>
            <param name="groupingBits">The grouping bits.</param>
        </member>
        <member name="T:Datatent.Core.Algo.Sort.RadixLsdUnsafe">
            <summary>
            TODO: source
            </summary>
        </member>
        <member name="M:Datatent.Core.Algo.Sort.RadixLsdUnsafe.Sort``1(System.Span{``0},System.Span{``0},System.Int32,System.Boolean)">
            <summary>
            Sorts the specified workspace.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keys">The keys.</param>
            <param name="workspace">The workspace.</param>
            <param name="r">The r.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
            <exception cref="T:System.NotSupportedException">Sort type '{typeof(T).Name}' is {Unsafe.SizeOf()} bytes, which is not supported</exception>
        </member>
        <member name="M:Datatent.Core.Algo.Sort.RadixLsdUnsafe.Sort(System.UInt32*,System.UInt32*,System.Int32,System.Int32,System.Boolean,System.UInt32)">
            <summary>
            Sorts the specified keys.
            </summary>
            <param name="keys">The keys.</param>
            <param name="workspace">The workspace.</param>
            <param name="length">The length.</param>
            <param name="r">The r.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
            <param name="mask">The mask.</param>
        </member>
        <member name="M:Datatent.Core.Algo.Sort.RadixLsdUnsafe.Sort(System.Span{System.UInt32},System.Span{System.UInt32},System.Int32,System.Boolean,System.UInt32)">
            <summary>
            Sorts the specified workspace.
            </summary>
            <param name="keys">The keys.</param>
            <param name="workspace">The workspace.</param>
            <param name="r">The r.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
            <param name="mask">The mask.</param>
        </member>
        <member name="P:Datatent.Core.Algo.Sort.RadixLsdUnsafe.DefaultR">
            <summary>
            Gets or sets the default r.
            </summary>
            <value>
            The default r.
            </value>
        </member>
        <member name="T:Datatent.Core.Block.BlockType">
            <summary>
            The block type
            </summary>
        </member>
        <member name="T:Datatent.Core.Block.BaseBlock">
            <summary>
            Base class for blocks
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Datatent.Core.Block.BaseBlock.BLOCK_MARKER">
            <summary>
            Header position of the block marker (byte 0) of type byte, always 1
            </summary>
        </member>
        <member name="F:Datatent.Core.Block.BaseBlock.BLOCK_ID">
            <summary>
            Header position of the block id (byte 1-2) of type ushort
            </summary>
        </member>
        <member name="F:Datatent.Core.Block.BaseBlock.BLOCK_TYPE">
            <summary>
            Header position of the block type (byte 3) of type <see cref="T:Datatent.Core.Block.BlockType"/>
            </summary>
        </member>
        <member name="M:Datatent.Core.Block.BaseBlock.ReadHeader``1">
            <summary>
            Reads the header.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Datatent.Core.Block.BaseBlock.WriteHeader``1(``0)">
            <summary>
            Writes the header.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="header">The header.</param>
        </member>
        <member name="M:Datatent.Core.Block.BaseBlock.GetNextBlockSliceAndAdjustOffset(System.Memory{System.Byte}@)">
            <summary>
            Gets the next block slice and adjust offset.
            </summary>
            <param name="memory">The memory.</param>
            <returns></returns>
        </member>
        <member name="T:Datatent.Core.Block.DataBlock">
            <summary>
            A data block
            </summary>
            <seealso cref="T:Datatent.Core.Block.BaseBlock" />
        </member>
        <member name="T:Datatent.Core.Block.DataBlock.DataBlockHeader">
            <summary>
            The header of a data block
            </summary>
        </member>
        <member name="F:Datatent.Core.Block.DataBlock.DataBlockHeader.Marker">
            <summary>
            Indicates the start of the block
            </summary>
        </member>
        <member name="F:Datatent.Core.Block.DataBlock.DataBlockHeader.Id">
            <summary>
            The block id
            </summary>
        </member>
        <member name="F:Datatent.Core.Block.DataBlock.DataBlockHeader.Type">
            <summary>
            The block type
            </summary>
        </member>
        <member name="F:Datatent.Core.Block.DataBlock.DataBlockHeader.NumberOfPages">
            <summary>
            The number of pages in the block
            </summary>
        </member>
        <member name="P:Datatent.Core.Block.DataBlock.Header">
            <summary>
            Gets or sets the header.
            </summary>
            <value>
            The header.
            </value>
        </member>
        <member name="F:Datatent.Core.Block.DataBlock.BLOCK_NUMBER_OF_PAGES">
            <summary>
            Header position of the number of pages in this block (byte 6-9) of type uint
            </summary>
        </member>
        <member name="M:Datatent.Core.Block.DataBlock.InitExisting">
            <summary>
            Initializes an existing block.
            </summary>
        </member>
        <member name="M:Datatent.Core.Block.DataBlock.SaveData(System.Byte[],System.UInt32)">
            <summary>
            Saves the data.
            </summary>
            <param name="data">The data.</param>
            <param name="typeId">The type identifier.</param>
            <returns>True if save is successful and the address of the Document</returns>
        </member>
        <member name="M:Datatent.Core.Block.DataBlock.InitEmpty(System.UInt16)">
            <summary>
            Initializes an empty block.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:Datatent.Core.Block.DataBlock.GetAllPages">
            <summary>
            Gets all pages in this block.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Datatent.Core.Common.Address">
            <summary>
            Describes a position of data in the database.
            </summary>
            <remarks>
            Each address has a scope that shows which granularity the address had.
            </remarks>
        </member>
        <member name="F:Datatent.Core.Common.Address.FullAddress">
            <summary>
            The full address. Can only be compared if the scope is taken into account.
            </summary>
        </member>
        <member name="P:Datatent.Core.Common.Address.Document">
            <summary>
            Gets the document number part of the address.
            </summary>
            <value>
            The document number.
            </value>
        </member>
        <member name="P:Datatent.Core.Common.Address.Page">
            <summary>
            Gets the page number part of the address.
            </summary>
            <value>
            The page number.
            </value> 
        </member>
        <member name="P:Datatent.Core.Common.Address.Block">
            <summary>
            Gets the block number part of the address.
            </summary>
            <value>
            The block number.
            </value>
        </member>
        <member name="P:Datatent.Core.Common.Address.Scope">
            <summary>
            Gets the scope of the address.
            </summary>
            <value>
            The scope.
            </value>
        </member>
        <member name="M:Datatent.Core.Common.Address.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Datatent.Core.Common.Address"/> struct.
            </summary>
            <param name="fullAddress">The full address.</param>
        </member>
        <member name="M:Datatent.Core.Common.Address.#ctor(Datatent.Core.Scheduler.AddressScope,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Datatent.Core.Common.Address"/> struct.
            </summary>
            <param name="scope">The scope.</param>
            <param name="fullAddress">The full address.</param>
        </member>
        <member name="M:Datatent.Core.Common.Address.#ctor(Datatent.Core.Scheduler.AddressScope,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Datatent.Core.Common.Address"/> struct.
            </summary>
            <param name="scope">The scope.</param>
            <param name="block">The block.</param>
        </member>
        <member name="M:Datatent.Core.Common.Address.#ctor(Datatent.Core.Scheduler.AddressScope,System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Datatent.Core.Common.Address"/> struct.
            </summary>
            <param name="scope">The scope.</param>
            <param name="block">The block.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:Datatent.Core.Common.Address.#ctor(Datatent.Core.Scheduler.AddressScope,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Datatent.Core.Common.Address"/> struct.
            </summary>
            <param name="scope">The scope.</param>
            <param name="block">The block.</param>
            <param name="page">The page.</param>
            <param name="document">The document.</param>
        </member>
        <member name="M:Datatent.Core.Common.Address.ToPosition">
            <summary>
            Converts to position in the file.
            Scope Document and Page are equal and only return the start of the Page.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Scope</exception>
            <exception cref="T:System.InvalidOperationException">Scope</exception>
        </member>
        <member name="M:Datatent.Core.Common.Address.op_Implicit(Datatent.Core.Common.Address)~System.UInt64">
            <summary>
            Performs an implicit conversion from <see cref="T:Datatent.Core.Common.Address"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="a">a.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Datatent.Core.Common.Address.op_Implicit(System.UInt64)~Datatent.Core.Common.Address">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:Datatent.Core.Common.Address"/>.
            </summary>
            <param name="u">The u.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Datatent.Core.Common.Address.FromUInt64(System.UInt64)">
            <summary>
            From int64 to Address.
            </summary>
            <param name="u">The u.</param>
            <returns></returns>
        </member>
        <member name="M:Datatent.Core.Common.Address.ToUInt64">
            <summary>
            Converts to uint64.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datatent.Core.Common.Address.ToString">
            <summary>
            Print the address in a human readable form.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datatent.Core.Common.Address.AreTheSame(Datatent.Core.Common.Address,System.Boolean)">
            <summary>
            Compare this address with the given one. Scope can be ignored.
            </summary>
            <param name="a">a.</param>
            <param name="ignoreScope">if set to <c>true</c> [ignore scope].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid scope {this.Scope} {a.Scope}</exception>
        </member>
        <member name="M:Datatent.Core.Common.Address.AreTheSame(Datatent.Core.Common.Address,Datatent.Core.Common.Address,System.Boolean)">
            <summary>
            Compare 2 address. Scope can be ignored.
            </summary>
            <param name="a1">The a1.</param>
            <param name="a2">The a2.</param>
            <param name="ignoreScope">if set to <c>true</c> [ignore scope].</param>
            <returns></returns>
        </member>
        <member name="M:Datatent.Core.Common.Address.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datatent.Core.Common.Address.op_Equality(Datatent.Core.Common.Address,Datatent.Core.Common.Address)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="address1">The address1.</param>
            <param name="address2">The address2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Datatent.Core.Common.Address.op_Inequality(Datatent.Core.Common.Address,Datatent.Core.Common.Address)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="address1">The address1.</param>
            <param name="address2">The address2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Datatent.Core.Common.Address.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Datatent.Core.Common.DatabaseHeader">
            <summary>
            The database header
            </summary>
        </member>
        <member name="F:Datatent.Core.Common.DatabaseHeader.Identifier">
            <summary>
            The identifier
            </summary>
        </member>
        <member name="F:Datatent.Core.Common.DatabaseHeader.Version">
            <summary>
            The version
            </summary>
        </member>
        <member name="F:Datatent.Core.Common.DatabaseHeader.DataProcessingInformations">
            <summary>
            Which pipelines are included to create the database
            </summary>
        </member>
        <member name="M:Datatent.Core.Common.DatabaseHeader.#ctor(System.UInt16,Datatent.Core.Service.DataProcessingInformations)">
            <summary>
            Initializes a new instance of the <see cref="T:Datatent.Core.Common.DatabaseHeader"/> struct.
            </summary>
            <param name="version">The version.</param>
            <param name="dataProcessingInformations">The data processing informations.</param>
        </member>
        <member name="T:Datatent.Core.Document.Document">
            <summary>
            Documents hold the actual data and are the smallest part of a data file.
            </summary>
            <remarks>
            A page can contain multiple documents of different types. The type of the object is mapped in the header pages.
            </remarks>
        </member>
        <member name="T:Datatent.Core.Document.Document.DocumentHeader">
            <summary>
            The document header
            </summary>
        </member>
        <member name="F:Datatent.Core.Document.Document.DocumentHeader.DocumentId">
            <summary>
            The document id
            </summary>
        </member>
        <member name="F:Datatent.Core.Document.Document.DocumentHeader.ContentLength">
            <summary>
            The compressed and actual saved content length
            </summary>
        </member>
        <member name="F:Datatent.Core.Document.Document.DocumentHeader.IsDeleted">
            <summary>
            Indicates whether the document is deleted
            </summary>
        </member>
        <member name="F:Datatent.Core.Document.Document._documentSlice">
            <summary>
            The current memory slice to operate on.
            </summary>
        </member>
        <member name="F:Datatent.Core.Document.Document.DOCUMENT_ID">
            <summary>
            Header position of the document id (byte 0-1) of type ushort
            </summary>
        </member>
        <member name="F:Datatent.Core.Document.Document.DOCUMENT_LENGTH">
            <summary>
            Header position of the document length without the header (byte 2-5) of type uint32
            </summary>
        </member>
        <member name="F:Datatent.Core.Document.Document.DOCUMENT_IS_DELETED">
            <summary>
            Header position of the is deleted flag (byte 11) of type byte
            </summary>
        </member>
        <member name="F:Datatent.Core.Document.Document.DOCUMENT_TYPE_ID">
            <summary>
            Header position of the document type id (byte 12-15) of type uint32
            </summary>
        </member>
        <member name="M:Datatent.Core.Document.Document.GetNextDocumentSliceAndAdjustOffset(System.Memory{System.Byte}@)">
            <summary>
            Gets the memory slice from the beginning until the end of the document and adjust the offset of the given memory slice to the next document.
            </summary>
            <param name="memory">the memory slice that holds the document</param>
            <remarks>
            Assumes that the document starts at index 0 of the memory slice.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Datatent.Core.Document.Document.#ctor(System.Nullable{System.Memory{System.Byte}})">
            <summary>
            Construct the document header from the given memory slice.
            </summary>
            <param name="documentSlice"></param>
        </member>
        <member name="M:Datatent.Core.Document.Document.#ctor(System.Memory{System.Byte},System.UInt16)">
            <summary>
            Creates an empty document, but don't write any data to the memory.
            </summary>
            <param name="documentSlice"></param>
            <param name="id"></param>
        </member>
        <member name="M:Datatent.Core.Document.Document.SetContent(System.Byte[])">
            <summary>
            Set the content to the memory but don't update the header.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Datatent.Core.Document.Document.GetContent">
            <summary>
            Retrieves the current content from the memory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datatent.Core.Document.Document.UpdateHeader">
            <summary>
            Update the header informations of the document.
            </summary>
        </member>
        <member name="M:Datatent.Core.Document.Document.Update(System.Byte[])">
            <summary>
            Update the header and the content of the document.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:Datatent.Core.IO.DiskFileSystemService">
            <summary>
            Uses a file for the data.
            </summary>
            <seealso cref="T:Datatent.Core.IO.FileSystemServiceBase" />
        </member>
        <member name="M:Datatent.Core.IO.DiskFileSystemService.#ctor(Datatent.Core.DatatentSettings,Microsoft.Extensions.Logging.ILogger{Datatent.Core.IO.FileSystemServiceBase})">
            <summary>
            Initializes a new instance of the <see cref="T:Datatent.Core.IO.DiskFileSystemService"/> class.
            </summary>
            <param name="settings">The settings.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Datatent.Core.IO.DiskFileSystemService.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Datatent.Core.IO.FileSystemServiceBase">
            <summary>
            Base class for the file system services
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Datatent.Core.IO.FileSystemServiceBase.#ctor(Datatent.Core.DatatentSettings,Microsoft.Extensions.Logging.ILogger{Datatent.Core.IO.FileSystemServiceBase})">
            <summary>
            Initializes a new instance of the <see cref="T:Datatent.Core.IO.FileSystemServiceBase"/> class.
            </summary>
            <param name="settings">The settings.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Datatent.Core.IO.FileSystemServiceBase.Write(Datatent.Core.Scheduler.IORequest)">
            <summary>
            Writes the data to the underlying stream
            </summary>
            <param name="writeRequest">The write request.</param>
        </member>
        <member name="M:Datatent.Core.IO.FileSystemServiceBase.GetHeaderLengthForScope(Datatent.Core.Scheduler.AddressScope)">
            <summary>
            Gets the header length for scope.
            </summary>
            <param name="scope">The scope.</param>
            <returns></returns>
        </member>
        <member name="M:Datatent.Core.IO.FileSystemServiceBase.WriteDatabaseHeader(Datatent.Core.Common.DatabaseHeader@)">
            <summary>
            Writes the database header.
            </summary>
            <param name="databaseHeader">The database header.</param>
        </member>
        <member name="M:Datatent.Core.IO.FileSystemServiceBase.ReadDatabaseHeader">
            <summary>
            Reads the database header.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datatent.Core.IO.FileSystemServiceBase.Read(Datatent.Core.Scheduler.IORequest)">
            <summary>
            Reads the data from the underlying stream
            </summary>
            <param name="readRequest">The read request.</param>
            <returns></returns>
        </member>
        <member name="M:Datatent.Core.IO.FileSystemServiceBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Datatent.Core.IO.MemoryFileSystemService">
            <summary>
            
            </summary>
            <seealso cref="T:Datatent.Core.IO.FileSystemServiceBase" />
        </member>
        <member name="T:Datatent.Core.IO.SpanExtensions">
            <summary>
            Extensions and Helper methods for Span and Memory
            </summary>
        </member>
        <member name="M:Datatent.Core.IO.SpanExtensions.ReadByte(System.Span{System.Byte},System.Int32)">
            <summary>
            Reads a byte.
            </summary>
            <param name="span">The span.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Datatent.Core.IO.SpanExtensions.ReadBytes(System.Span{System.Byte},System.Int32,System.Int32)">
            <summary>
            Reads bytes.
            </summary>
            <param name="span">The span.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Datatent.Core.IO.SpanExtensions.ReadBool(System.Span{System.Byte},System.Int32)">
            <summary>
            Reads a bool.
            </summary>
            <param name="span">The span.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Datatent.Core.IO.SpanExtensions.ReadUInt32(System.Span{System.Byte},System.Int32)">
            <summary>
            Reads the a uint32.
            </summary>
            <param name="span">The span.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Datatent.Core.IO.SpanExtensions.ReadUInt16(System.Span{System.Byte},System.Int32)">
            <summary>
            Reads a uint16.
            </summary>
            <param name="span">The span.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Datatent.Core.IO.SpanExtensions.ReadGuid(System.Span{System.Byte},System.Int32)">
            <summary>
            Reads a unique identifier.
            </summary>
            <param name="span">The span.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Datatent.Core.IO.SpanExtensions.WriteBytes(System.Memory{System.Byte},System.Int32,System.Byte[])">
            <summary>
            Write bytes.
            </summary>
            <param name="memory">The memory.</param>
            <param name="offset">The offset.</param>
            <param name="bytes">The bytes.</param>
            <exception cref="T:System.ArgumentNullException">bytes</exception>
        </member>
        <member name="M:Datatent.Core.IO.SpanExtensions.WriteBytes(System.Span{System.Byte}@,System.Int32,System.Byte[])">
            <summary>
            Write bytes.
            </summary>
            <param name="span">The span.</param>
            <param name="offset">The offset.</param>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:Datatent.Core.IO.SpanExtensions.Write``1(System.Span{``0},System.Int32,System.Span{``0})">
            <summary>
            Writes the values to the span.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="span">The span.</param>
            <param name="offset">The offset.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Datatent.Core.IO.SpanExtensions.WriteByte(System.Span{System.Byte},System.Int32,System.Byte)">
            <summary>
            Writes a byte.
            </summary>
            <param name="span">The span.</param>
            <param name="offset">The offset.</param>
            <param name="b">The b.</param>
        </member>
        <member name="M:Datatent.Core.IO.SpanExtensions.WriteBool(System.Span{System.Byte},System.Int32,System.Boolean)">
            <summary>
            Writes a bool.
            </summary>
            <param name="span">The span.</param>
            <param name="offset">The offset.</param>
            <param name="b">if set to <c>true</c> [b].</param>
        </member>
        <member name="M:Datatent.Core.IO.SpanExtensions.WriteGuid(System.Span{System.Byte},System.Int32,System.Guid)">
            <summary>
            Writes a unique identifier.
            </summary>
            <param name="span">The span.</param>
            <param name="offset">The offset.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:Datatent.Core.IO.SpanExtensions.WriteUInt32(System.Span{System.Byte},System.Int32,System.UInt32)">
            <summary>
            Writes a uint32.
            </summary>
            <param name="span">The span.</param>
            <param name="offset">The offset.</param>
            <param name="val">The value.</param>
        </member>
        <member name="T:Datatent.Core.Pages.BasePage">
            <summary>
            Smallest unit of data storage.
            A specific number of pages are belongs to a block.
            A page has a specific size and can contain more than one data object.
            </summary>
            <remarks>
            Every page starts with a header that gives the following informations:
            <see cref="T:Datatent.Core.Pages.BasePage.PageHeader"/>
            </remarks>
        </member>
        <member name="T:Datatent.Core.Pages.BasePage.PageHeader">
            <summary>
            The header of every page, the header start until the PageTypeId is the same for every type
            but the following can be different.
            </summary>
        </member>
        <member name="F:Datatent.Core.Pages.BasePage.PageHeader.PageId">
            <summary>
            The page identifier
            </summary>
        </member>
        <member name="F:Datatent.Core.Pages.BasePage.PAGE_ID">
            <summary>
            The id of the page, goes from byte 0-1
            </summary>
        </member>
        <member name="F:Datatent.Core.Pages.BasePage.PAGE_TYPE">
            <summary>
            The page type, goes from byte 2-2
            </summary>
            <see cref="T:Datatent.Core.Pages.PageType"/>
        </member>
        <member name="P:Datatent.Core.Scheduler.IOResponse.Id">
            <summary>
            The request id
            </summary>
        </member>
        <member name="P:Datatent.Core.Scheduler.IOResponse.Address">
            <summary>
            The address which should be loaded / written
            </summary>
        </member>
        <member name="T:Datatent.Core.Scheduler.IORequest">
            <summary>
            A request to the underlying file system
            </summary>
        </member>
        <member name="M:Datatent.Core.Scheduler.IORequest.#ctor(Datatent.Core.Scheduler.IORequestDirection,Datatent.Core.Common.Address,Datatent.Core.Scheduler.IoRequestProperties)">
            <summary>
            ctor
            </summary>
            <param name="requestDirection"></param>
            <param name="address"></param>
        </member>
        <member name="P:Datatent.Core.Scheduler.IORequest.Id">
            <summary>
            The request id
            </summary>
        </member>
        <member name="P:Datatent.Core.Scheduler.IORequest.Address">
            <summary>
            The address which should be loaded / written
            </summary>
        </member>
        <member name="P:Datatent.Core.Scheduler.IORequest.RequestDirection">
            <summary>
            Read or write?
            </summary>
        </member>
        <member name="P:Datatent.Core.Scheduler.IORequest.Payload">
            <summary>
            The payload
            </summary>
        </member>
        <member name="M:Datatent.Core.Scheduler.IORequest.CreateReadRequest(Datatent.Core.Common.Address,Datatent.Core.Scheduler.IoRequestProperties)">
            <summary>
            Creates a new read request
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:Datatent.Core.Scheduler.IORequest.CreateWriteIoRequest(Datatent.Core.Common.Address,System.Memory{System.Byte},Datatent.Core.Scheduler.IoRequestProperties)">
            <summary>
            Creates a new write request
            </summary>
            <param name="address"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:Datatent.Core.Scheduler.IORequest.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Datatent.Core.Scheduler.IORequest.op_Equality(Datatent.Core.Scheduler.IORequest,Datatent.Core.Scheduler.IORequest)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="request1">The request1.</param>
            <param name="request2">The request2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Datatent.Core.Scheduler.IORequest.op_Inequality(Datatent.Core.Scheduler.IORequest,Datatent.Core.Scheduler.IORequest)">
            <summary>Implements the operator !=.</summary>
            <param name="request1">The request1.</param>
            <param name="request2">The request2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Datatent.Core.Scheduler.IORequest.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datatent.Core.Service.DataProcessingPipeline">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
